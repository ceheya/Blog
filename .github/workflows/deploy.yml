# 文件路径: .github/workflows/deploy.yml
# 功能: 当代码推送到 main 分支时，自动构建并部署网站到您的服务器
# 版本: 已修正 pnpm 安装顺序

name: Deploy Website to Server

# 触发工作流的事件
on:
  # 当有代码被推送到 main 分支时触发
  push:
    branches:
      - main

# 工作流包含的任务
jobs:
  # 定义一个名为 "build-and-deploy" 的任务
  build-and-deploy:
    # 指定任务运行的虚拟环境
    runs-on: ubuntu-latest

    # 任务执行的步骤
    steps:
      # 第 1 步: 检出代码
      # 从您的仓库中拉取最新的代码到虚拟环境中
      - name: Checkout Code
        uses: actions/checkout@v4

      # 第 2 步: 安装 pnpm (关键改动：已提前)
      # 提前安装 pnpm，确保后续步骤可以找到 pnpm 命令
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      # 第 3 步: 设置 Node.js 环境
      # 安装指定版本的 Node.js，并让它使用已安装的 pnpm 来处理缓存
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # 您可以根据项目需要修改为 '20' 等
          cache: 'pnpm'

      # 第 4 步: 安装项目依赖
      # 使用 pnpm 安装 package.json 中定义的所有依赖项
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      # 第 5 步: 构建项目
      # 执行 package.json 中的 "build" 脚本，生成静态文件到 dist 目录
      - name: Build Project
        run: pnpm run build

      # 第 6 步: 部署到服务器
      # 使用 rsync 通过 SSH 将构建好的 dist 目录同步到您的服务器
      - name: Deploy to Server
        uses: easingthemes/ssh-deploy@v5.0.0
        with:
          # SSH 私钥，从 GitHub Secrets 中安全地读取
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

          # 要部署的源文件夹
          SOURCE: "dist/"

          # 远程服务器的主机名或 IP 地址
          REMOTE_HOST: "119.91.235.233"

          # 登录服务器的用户名
          REMOTE_USER: "root"

          # 部署到服务器上的目标目录
          # !!! 请根据您的实际情况确认此路径是否正确 !!!
          TARGET: "/opt/blog/"

          # rsync 命令的额外参数
          ARGS: "-avz --delete"